create database mz_db1;
create database mz_db2;
Case 1: Transaction size histogram is not collected by default
SELECT @@SQL_STATS_CONTROL;
@@SQL_STATS_CONTROL
OFF_HARD
SELECT @@WRITE_STATS_COUNT;
@@WRITE_STATS_COUNT
0
SELECT @@WRITE_STATS_FREQUENCY;
@@WRITE_STATS_FREQUENCY
0
select count(*) from information_schema.transaction_size_histogram;
count(*)
0
Case 2: Transaction size histogram collection is enabled
SET @@GLOBAL.SQL_STATS_CONTROL="ON";
SET @@GLOBAL.WRITE_STATS_COUNT=10;
SET @@GLOBAL.WRITE_STATS_FREQUENCY=1;
SET @@GLOBAL.TRANSACTION_SIZE_HISTOGRAM_WIDTH=20;
SELECT @@SQL_STATS_CONTROL;
@@SQL_STATS_CONTROL
ON
SELECT @@WRITE_STATS_COUNT;
@@WRITE_STATS_COUNT
10
SELECT @@WRITE_STATS_FREQUENCY;
@@WRITE_STATS_FREQUENCY
1
SELECT @@GLOBAL.TRANSACTION_SIZE_HISTOGRAM_WIDTH;
@@GLOBAL.TRANSACTION_SIZE_HISTOGRAM_WIDTH
20
use mz_db1;
CREATE TABLE tables (
TABLE_CATALOG varchar(512),
TABLE_SCHEMA varchar(64),
TABLE_NAME varchar(64),
TABLE_TYPE varchar(64),
ENGINE varchar(64),
VERSION bigint(21) unsigned,
ROW_FORMAT varchar(10),
TABLE_ROWS bigint(21) unsigned,
AVG_ROW_LENGTH bigint(21) unsigned,
DATA_LENGTH bigint(21) unsigned,
MAX_DATA_LENGTH bigint(21) unsigned,
INDEX_LENGTH bigint(21) unsigned,
DATA_FREE bigint(21) unsigned,
AUTO_INCREMENT bigint(21) unsigned,
CREATE_TIME datetime,
UPDATE_TIME datetime,
CHECK_TIME datetime,
TABLE_COLLATION varchar(32),
CHECKSUM bigint(21) unsigned,
CREATE_OPTIONS varchar(255),
TABLE_COMMENT varchar(2048)
);
insert into tables select * from information_schema.tables;
Case 2.1: expect to see [count=1,sum=1]
select count(*), sum(count_bucket)
from information_schema.transaction_size_histogram
where db = 'mz_db1' and count_bucket > 0;
count(*)	sum(count_bucket)
1	1
insert into tables select * from tables;
Case 2.2: expect to see [count=1,sum=2]
select count(*), sum(count_bucket)
from information_schema.transaction_size_histogram
where db = 'mz_db1' and count_bucket > 0;
count(*)	sum(count_bucket)
1	2
insert into tables select * from tables;
Case 2.3: expect to see [count=2,sum=3]
select count(*), sum(count_bucket)
from information_schema.transaction_size_histogram
where db = 'mz_db1' and count_bucket > 0;
count(*)	sum(count_bucket)
2	3
Case 3: Transaction size histogram collected in 2 databases
use mz_db2;
CREATE TABLE tables (
TABLE_CATALOG varchar(512),
TABLE_SCHEMA varchar(64),
TABLE_NAME varchar(64),
TABLE_TYPE varchar(64),
ENGINE varchar(64),
VERSION bigint(21) unsigned,
ROW_FORMAT varchar(10),
TABLE_ROWS bigint(21) unsigned,
AVG_ROW_LENGTH bigint(21) unsigned,
DATA_LENGTH bigint(21) unsigned,
MAX_DATA_LENGTH bigint(21) unsigned,
INDEX_LENGTH bigint(21) unsigned,
DATA_FREE bigint(21) unsigned,
AUTO_INCREMENT bigint(21) unsigned,
CREATE_TIME datetime,
UPDATE_TIME datetime,
CHECK_TIME datetime,
TABLE_COLLATION varchar(32),
CHECKSUM bigint(21) unsigned,
CREATE_OPTIONS varchar(255),
TABLE_COMMENT varchar(2048)
);
insert into tables select * from information_schema.tables;
insert into tables select * from tables;
insert into tables select * from tables;
Case 3.1: expect to see [count=20], same statistics in both databases
select count(*)
from information_schema.transaction_size_histogram db1,
information_schema.transaction_size_histogram db2
where db1.db = 'mz_db1'
  and db2.db = 'mz_db2'
  and db1.bucket_number=db2.bucket_number
and db1.count_bucket =db1.count_bucket;
count(*)
20
Case 3.2: expect to see two rows [count=2,sum=3] one per database
select db, count(*), sum(count_bucket)
from information_schema.transaction_size_histogram
where count_bucket > 0
group by db;
db	count(*)	sum(count_bucket)
mz_db1	2	3
mz_db2	2	3
Case 4: Dynamically change transaction_size_histogram_width
SET @@GLOBAL.transaction_size_histogram_width=30;
Case 4.1: histogram data is lost, expect [count=0,sum=NULL]
select count(*), sum(count_bucket) from information_schema.transaction_size_histogram;
count(*)	sum(count_bucket)
0	NULL
use mz_db1;
insert into tables select * from information_schema.tables;
insert into tables select * from tables;
insert into tables select * from tables;
Case 4.2: expect to see one row [count=3,sum=3] for mz_db1
select db, count(*), sum(count_bucket)
from information_schema.transaction_size_histogram
where db = 'mz_db1' and count_bucket > 0
group by db;
db	count(*)	sum(count_bucket)
mz_db1	3	3
Case 5: Multi-statement traansaction
SET @@GLOBAL.transaction_size_histogram_width=20;
use mz_db1;
START TRANSACTION;
insert into tables select * from information_schema.tables;
COMMIT;
START TRANSACTION;
insert into tables select * from information_schema.tables;
insert into tables select * from information_schema.tables;
COMMIT;
START TRANSACTION;
insert into tables select * from information_schema.tables;
insert into tables select * from information_schema.tables;
insert into tables select * from information_schema.tables;
COMMIT;
START TRANSACTION;
insert into tables select * from information_schema.tables;
insert into tables select * from information_schema.tables;
insert into tables select * from information_schema.tables;
insert into tables select * from information_schema.tables;
COMMIT;
START TRANSACTION;
insert into tables select * from information_schema.tables;
insert into tables select * from information_schema.tables;
insert into tables select * from information_schema.tables;
insert into tables select * from information_schema.tables;
insert into tables select * from information_schema.tables;
COMMIT;
Case 4.2: expect to see 5, every txn maps to a different bucket
select count(distinct bucket_number)
from information_schema.transaction_size_histogram
where count_bucket > 0;
count(distinct bucket_number)
5
Cleanup
DROP database mz_db1;
DROP database mz_db2;
SET @@GLOBAL.SQL_STATS_CONTROL="OFF_HARD";
SET @@GLOBAL.WRITE_STATS_COUNT=0;
SET @@GLOBAL.WRITE_STATS_FREQUENCY=0;
SET @@GLOBAL.transaction_size_histogram_width=10;
