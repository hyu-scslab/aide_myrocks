#
# Tests functionality of information_schema.write_statistics
#

-- source include/have_binlog_format_row.inc

#######################################
### Setup
#######################################
create database mz_db1;
create database mz_db2;

##################################################################
### Case 1: Transaction size histogram is not collected by default
##################################################################
--echo Case 1: Transaction size histogram is not collected by default
SELECT @@SQL_STATS_CONTROL;
SELECT @@WRITE_STATS_COUNT;
SELECT @@WRITE_STATS_FREQUENCY;

select count(*) from information_schema.transaction_size_histogram;

##################################################################
### Case 2: Transaction size histogram collection is enabled
##################################################################
--echo Case 2: Transaction size histogram collection is enabled
SET @@GLOBAL.SQL_STATS_CONTROL="ON";
SET @@GLOBAL.WRITE_STATS_COUNT=10;
SET @@GLOBAL.WRITE_STATS_FREQUENCY=1;
SET @@GLOBAL.TRANSACTION_SIZE_HISTOGRAM_WIDTH=20;

SELECT @@SQL_STATS_CONTROL;
SELECT @@WRITE_STATS_COUNT;
SELECT @@WRITE_STATS_FREQUENCY;
SELECT @@GLOBAL.TRANSACTION_SIZE_HISTOGRAM_WIDTH;

use mz_db1;

CREATE TABLE tables (
  TABLE_CATALOG varchar(512),
  TABLE_SCHEMA varchar(64),
  TABLE_NAME varchar(64),
  TABLE_TYPE varchar(64),
  ENGINE varchar(64),
  VERSION bigint(21) unsigned,
  ROW_FORMAT varchar(10),
  TABLE_ROWS bigint(21) unsigned,
  AVG_ROW_LENGTH bigint(21) unsigned,
  DATA_LENGTH bigint(21) unsigned,
  MAX_DATA_LENGTH bigint(21) unsigned,
  INDEX_LENGTH bigint(21) unsigned,
  DATA_FREE bigint(21) unsigned,
  AUTO_INCREMENT bigint(21) unsigned,
  CREATE_TIME datetime,
  UPDATE_TIME datetime,
  CHECK_TIME datetime,
  TABLE_COLLATION varchar(32),
  CHECKSUM bigint(21) unsigned,
  CREATE_OPTIONS varchar(255),
  TABLE_COMMENT varchar(2048)
);

insert into tables select * from information_schema.tables;
-- real_sleep 1
-- echo Case 2.1: expect to see [count=1,sum=1]
select count(*), sum(count_bucket)
from information_schema.transaction_size_histogram
where db = 'mz_db1' and count_bucket > 0;

insert into tables select * from tables;
-- echo Case 2.2: expect to see [count=1,sum=2]
select count(*), sum(count_bucket)
from information_schema.transaction_size_histogram
where db = 'mz_db1' and count_bucket > 0;

insert into tables select * from tables;
-- echo Case 2.3: expect to see [count=2,sum=3]
select count(*), sum(count_bucket)
from information_schema.transaction_size_histogram
where db = 'mz_db1' and count_bucket > 0;

##################################################################
### Case 3: Transaction size histogram collected in two databases
##################################################################
--echo Case 3: Transaction size histogram collected in 2 databases

use mz_db2;

CREATE TABLE tables (
  TABLE_CATALOG varchar(512),
  TABLE_SCHEMA varchar(64),
  TABLE_NAME varchar(64),
  TABLE_TYPE varchar(64),
  ENGINE varchar(64),
  VERSION bigint(21) unsigned,
  ROW_FORMAT varchar(10),
  TABLE_ROWS bigint(21) unsigned,
  AVG_ROW_LENGTH bigint(21) unsigned,
  DATA_LENGTH bigint(21) unsigned,
  MAX_DATA_LENGTH bigint(21) unsigned,
  INDEX_LENGTH bigint(21) unsigned,
  DATA_FREE bigint(21) unsigned,
  AUTO_INCREMENT bigint(21) unsigned,
  CREATE_TIME datetime,
  UPDATE_TIME datetime,
  CHECK_TIME datetime,
  TABLE_COLLATION varchar(32),
  CHECKSUM bigint(21) unsigned,
  CREATE_OPTIONS varchar(255),
  TABLE_COMMENT varchar(2048)
);

insert into tables select * from information_schema.tables;
insert into tables select * from tables;
insert into tables select * from tables;

--echo Case 3.1: expect to see [count=20], same statistics in both databases
select count(*)
from information_schema.transaction_size_histogram db1,
     information_schema.transaction_size_histogram db2
where db1.db = 'mz_db1'
  and db2.db = 'mz_db2'
  and db1.bucket_number=db2.bucket_number
  and db1.count_bucket =db1.count_bucket;

--echo Case 3.2: expect to see two rows [count=2,sum=3] one per database
select db, count(*), sum(count_bucket)
from information_schema.transaction_size_histogram
where count_bucket > 0
group by db;

################################################################
### Case 4: Dynamically change transaction_size_histogram_width
################################################################
--echo Case 4: Dynamically change transaction_size_histogram_width

SET @@GLOBAL.transaction_size_histogram_width=30;

-- echo Case 4.1: histogram data is lost, expect [count=0,sum=NULL]
select count(*), sum(count_bucket) from information_schema.transaction_size_histogram;

use mz_db1;
insert into tables select * from information_schema.tables;
insert into tables select * from tables;
insert into tables select * from tables;

--echo Case 4.2: expect to see one row [count=3,sum=3] for mz_db1
select db, count(*), sum(count_bucket)
from information_schema.transaction_size_histogram
where db = 'mz_db1' and count_bucket > 0
group by db;

################################################################
### Case 5: Multi-statement traansaction
################################################################
-- echo Case 5: Multi-statement traansaction

SET @@GLOBAL.transaction_size_histogram_width=20;

use mz_db1;

START TRANSACTION;
insert into tables select * from information_schema.tables;
COMMIT;

START TRANSACTION;
insert into tables select * from information_schema.tables;
insert into tables select * from information_schema.tables;
COMMIT;

START TRANSACTION;
insert into tables select * from information_schema.tables;
insert into tables select * from information_schema.tables;
insert into tables select * from information_schema.tables;
COMMIT;

START TRANSACTION;
insert into tables select * from information_schema.tables;
insert into tables select * from information_schema.tables;
insert into tables select * from information_schema.tables;
insert into tables select * from information_schema.tables;
COMMIT;

START TRANSACTION;
insert into tables select * from information_schema.tables;
insert into tables select * from information_schema.tables;
insert into tables select * from information_schema.tables;
insert into tables select * from information_schema.tables;
insert into tables select * from information_schema.tables;
COMMIT;

--echo Case 4.2: expect to see 5, every txn maps to a different bucket
select count(distinct bucket_number)
from information_schema.transaction_size_histogram
where count_bucket > 0;

########################################################################################################
### Cleanup
########################################################################################################
--echo Cleanup
DROP database mz_db1;
DROP database mz_db2;
SET @@GLOBAL.SQL_STATS_CONTROL="OFF_HARD";
SET @@GLOBAL.WRITE_STATS_COUNT=0;
SET @@GLOBAL.WRITE_STATS_FREQUENCY=0;
SET @@GLOBAL.transaction_size_histogram_width=10;
