--disable_warnings
DROP TABLE IF EXISTS tbl1;
DROP TABLE IF EXISTS tbl2;
DROP TABLE IF EXISTS tbl3;
DROP DATABASE IF EXISTS cus_test;
CREATE DATABASE cus_test;
USE cus_test;
--enable_warnings

CREATE TABLE tbl1 (
  col1_1 INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  col1_2 INT(6) NOT NULL,
  col1_3 INT(6) NOT NULL,
  col1_4 INT(6) NOT NULL);

INSERT INTO tbl1 (col1_2, col1_3, col1_4) VALUES (2, 3, 4);
INSERT INTO tbl1 (col1_2, col1_3, col1_4) VALUES (3, 4, 5);
INSERT INTO tbl1 (col1_2, col1_3, col1_4) VALUES (4, 5, 6);

CREATE TABLE tbl2 (col2_1 INT(6) NOT NULL, col2_2 INT(6) NOT NULL);
INSERT INTO tbl2 (col2_1, col2_2) VALUES (2, 3);

CREATE TABLE tbl3 (
  col3_1 INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  col3_2 INT(6) NOT NULL,
  col3_3 INT(6) NOT NULL);

INSERT INTO tbl3 (col3_2, col3_3) VALUES (2, 83);
INSERT INTO tbl3 (col3_2, col3_3) VALUES (3, 84);
INSERT INTO tbl3 (col3_2, col3_3) VALUES (4, 85);

set global column_stats_control = ON;
set global sql_stats_control = ON;

# Executing queries that would populate column_statistics

SELECT t1.col1_1, t2.col1_2 FROM tbl1 t1 INNER JOIN tbl1 t2 ON t1.col1_2 = t2.col1_1 WHERE t1.col1_1 IN (1, 2, 3);

SELECT * FROM tbl1 t1 NATURAL JOIN tbl1 t2;

SELECT tbl1.col1_1, tbl2.col2_2 FROM tbl1 JOIN tbl2 ON tbl1.col1_2 = col2_2 JOIN tbl1 t11 ON tbl1.col1_1 = t11.col1_1
WHERE tbl1.col1_2 IN (1, 2, 3);

SELECT * FROM tbl1, tbl2, tbl3, tbl2 t21, tbl1 t11
WHERE tbl1.col1_1 = tbl2.col2_1 AND t21.col2_2 > t11.col1_3 AND t11.col1_1 = tbl1.col1_1 AND tbl3.col3_2 > 0;

SELECT * FROM tbl1 WHERE col1_1 > 0 UNION SELECT t2.* FROM tbl1 t1, tbl1 t2 WHERE t1.col1_1 = t2.col1_1;

# Verification of stats accumulated

--echo Number of distinct queries executed.
SELECT COUNT(DISTINCT SQL_ID) FROM information_schema.column_statistics cs
WHERE cs.TABLE_SCHEMA <> 'information_schema';

--vertical_results

--echo Number of distinct table instances per table for each query
SELECT cs.SQL_ID, SQL_TEXT, TABLE_SCHEMA, TABLE_NAME, COUNT(DISTINCT TABLE_INSTANCE) AS NUM_INSTANCES
FROM information_schema.column_statistics cs, information_schema.sql_text mt
WHERE cs.TABLE_SCHEMA <> 'information_schema' AND cs.SQL_ID = mt.SQL_ID
GROUP BY cs.SQL_ID, SQL_TEXT, TABLE_SCHEMA, TABLE_NAME
ORDER BY cs.SQL_ID, SQL_TEXT, TABLE_SCHEMA, TABLE_NAME, NUM_INSTANCES DESC;

--echo Distinct column accesses per table instance per query.
SELECT SQL_ID, SQL_TEXT, TABLE_SCHEMA, TABLE_NAME, COLUMN_USAGE_COUNT FROM (
    SELECT cs.SQL_ID, SQL_TEXT, TABLE_SCHEMA, TABLE_NAME, TABLE_INSTANCE, COUNT(*) AS COLUMN_USAGE_COUNT
    FROM information_schema.column_statistics cs,
         information_schema.sql_text mt
    WHERE cs.TABLE_SCHEMA <> 'information_schema' AND cs.SQL_ID = mt.SQL_ID
    GROUP BY cs.SQL_ID, SQL_TEXT, TABLE_SCHEMA, TABLE_NAME, TABLE_INSTANCE
) t ORDER BY SQL_ID, SQL_TEXT, TABLE_SCHEMA, TABLE_NAME, COLUMN_USAGE_COUNT DESC;

--echo Unique column accesses per table instance per SQL_ID
SELECT cs.SQL_ID, SQL_TEXT, TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, SQL_OPERATION, OPERATOR_TYPE
FROM information_schema.column_statistics cs, information_schema.sql_text mt
WHERE cs.TABLE_SCHEMA <> 'information_schema' AND cs.SQL_ID = mt.SQL_ID
ORDER BY SQL_ID, SQL_TEXT, TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, SQL_OPERATION, OPERATOR_TYPE;

set global column_stats_control = OFF_HARD;
set global sql_stats_control = OFF_HARD;


DROP TABLE tbl1;
DROP TABLE tbl2;
DROP TABLE tbl3;
DROP DATABASE cus_test;
